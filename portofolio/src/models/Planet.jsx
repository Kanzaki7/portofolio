/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import { useRef, useEffect, useState } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import { a } from '@react-spring/three';
import { gsap } from "gsap";


import islandScene from '/wonderful_world.glb';
import Pacman from './Pacman'
import Ship from './Ship'
import Book from './Book'
import SatelliteDish from './SatelliteDish'
import Torii from './Torii'
import { If } from 'three/examples/jsm/nodes/Nodes.js';

const Planet = ({ isRotating, setIsRotating, setCurrentStage, currentStage, setZoomedIn, zoomedIn, zoomedSatellite, setZoomedSatellite, zoomedAstro, setZoomedAstro, handleRocketClick, ...props }) => {
//     const { gl, size } = useThree();
//   const islandRef = useRef();
//   const { nodes, materials, animations } = useGLTF(islandScene);
//   const { actions } = useAnimations(animations, islandRef);

//   const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });

//   const handlePointerMove = (e) => {
//     const clientX = e.clientX || e.touches[0].clientX;
//     const clientY = e.clientY || e.touches[0].clientY;

//     const x = (clientX / size.width) * 2 - 1;
//     const y = -(clientY / size.height) * 2 + 1;

//     setCursorPosition({ x, y });
//   };

//   useEffect(() => {
//     const canvas = gl.domElement;
//     canvas.addEventListener('pointermove', handlePointerMove);

//     return () => {
//       canvas.removeEventListener('pointermove', handlePointerMove);
//     };
//   }, [gl, size]);

//   useFrame(() => {
//     const { x, y } = cursorPosition;

//     // Adjust these thresholds and speeds for desired behavior
//     const threshold = 0.3;
//     const rotationSpeed = 0.01;

//     if (x > threshold) {
//       islandRef.current.rotation.y -= rotationSpeed; // Rotate left
//     } else if (x < -threshold) {
//       islandRef.current.rotation.y += rotationSpeed; // Rotate right
//     }

//     if (y > threshold) {
//       islandRef.current.rotation.x += rotationSpeed; // Rotate up
//     } else if (y < -threshold) {
//       islandRef.current.rotation.x -= rotationSpeed; // Rotate down
//     }

//     const rotationY = islandRef.current.rotation.y;
//     const normalizedRotationY = ((rotationY % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

//     switch (true) {
//       case normalizedRotationY >= 5.45 && normalizedRotationY <= 5.85:
//         setCurrentStage(4);
//         break;
//       case normalizedRotationY >= 0.85 && normalizedRotationY <= 1.3:
//         setCurrentStage(3);
//         break;
//       case normalizedRotationY >= 2.4 && normalizedRotationY <= 2.6:
//         setCurrentStage(2);
//         break;
//       case normalizedRotationY >= 4.25 && normalizedRotationY <= 4.75:
//         setCurrentStage(1);
//         break;
//       default:
//         setCurrentStage(null);
//     }
//   });



const { gl, viewport, camera } = useThree();

  const islandRef = useRef();
  const { nodes, materials, animations } = useGLTF(islandScene);
  const { actions } = useAnimations(animations, islandRef);

  const initialCameraPosition = useRef({ x: 0, y: 0, z: 5 });
  const zoomedInRotation = useRef({ x: 0.7, y: -0.4, z: 0 });

  const lastPos = useRef({ x: 0, y: 0 });
  const rotationSpeed = useRef({ x: 0, y: 0 });
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    const clientY = e.touches ? e.touches[0].clientY : e.clientY;
    lastPos.current = { x: clientX, y: clientY };
  };

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const clientY = e.touches ? e.touches[0].clientY : e.clientY;

      const deltaX = (clientX - lastPos.current.x) / viewport.width;
      const deltaY = (clientY - lastPos.current.y) / viewport.height;

      islandRef.current.rotation.y += deltaX * 0.01 * Math.PI;
      islandRef.current.rotation.x += deltaY * 0.01 * Math.PI;

      lastPos.current = { x: clientX, y: clientY };
      rotationSpeed.current = { x: deltaX * 0.01 * Math.PI, y: deltaY * 0.01 * Math.PI };
    }
  };

  const handleTouchStart = (e) => {
    e.preventDefault();
    setIsRotating(true);
    const touch = e.touches[0];
    lastPos.current = { x: touch.clientX, y: touch.clientY };
  };

  const handleTouchMove = (e) => {
    e.preventDefault();
    if (isRotating) {
      const touch = e.touches[0];
      const deltaX = (touch.clientX - lastPos.current.x) / viewport.width;
      const deltaY = (touch.clientY - lastPos.current.y) / viewport.height;

      islandRef.current.rotation.y += deltaX * 0.01 * Math.PI;
      islandRef.current.rotation.x += deltaY * 0.01 * Math.PI;

      lastPos.current = { x: touch.clientX, y: touch.clientY };
      rotationSpeed.current = { x: deltaX * 0.01 * Math.PI, y: deltaY * 0.01 * Math.PI };
    }
  };

  const handleTouchEnd = (e) => {
    e.preventDefault();
    setIsRotating(false);
  };


  useEffect(() => {
    if (islandRef.current.position.z === -20) {
      gsap.to(islandRef.current.position, {
        duration: 1.5,
        z: 0,
        ease: "power2.inOut"
      });
    }

    const canvas = gl.domElement;

    if (zoomedIn == false) {
      canvas.addEventListener('pointerdown', handlePointerDown);
      canvas.addEventListener('pointermove', handlePointerMove);
      canvas.addEventListener('pointerup', handlePointerUp);
      canvas.addEventListener('touchstart', handleTouchStart);
      canvas.addEventListener('touchmove', handleTouchMove);
      canvas.addEventListener('touchend', handleTouchEnd);
    }

    const adjustCamera = () => {
      const aspect = viewport.width / viewport.height;
      if (aspect < 1) {
        camera.position.z = 7;
        islandRef.current.scale.set(0.8, 0.8, 0.8);
      } else {
        camera.position.z = 5;
        islandRef.current.scale.set(1, 1, 1);
      }
    };

    adjustCamera();
    window.addEventListener('resize', adjustCamera);

    camera.position.set(initialCameraPosition.current.x, initialCameraPosition.current.y, initialCameraPosition.current.z);
    camera.rotation.set(0, 0, 0);

    const handleKeyDown = (event) => {
      if (event.code === 'Enter') {
        setZoomedIn(true);
        if (currentStage === 5) {
          setZoomedAstro(true);
        }
      }
    };


    document.addEventListener('keydown', handleKeyDown);
    

    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointermove', handlePointerMove);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('touchstart', handleTouchStart);
      canvas.removeEventListener('touchmove', handleTouchMove);
      canvas.removeEventListener('touchend', handleTouchEnd);
      document.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('resize', adjustCamera);
    };
  }, [gl, handlePointerDown, handlePointerMove, handlePointerUp, viewport, handleTouchStart, handleTouchMove, handleTouchEnd]);

  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current.x *= dampingFactor;
      rotationSpeed.current.y *= dampingFactor;

      if (Math.abs(rotationSpeed.current.x) < 0.001) {
        rotationSpeed.current.x = 0;
      }
      if (Math.abs(rotationSpeed.current.y) < 0.001) {
        rotationSpeed.current.y = 0;
      }

      islandRef.current.rotation.y += rotationSpeed.current.x;
      islandRef.current.rotation.x += rotationSpeed.current.y;
    } else {
      const rotationY = islandRef.current.rotation.y;
      const rotationX = islandRef.current.rotation.x;
      const normalizedRotationY = ((rotationY % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
      const normalizedRotationX = ((rotationX % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
      console.log(normalizedRotationY, normalizedRotationX);


      switch (true) {
        case ((normalizedRotationY >= -0.4 && normalizedRotationY <= 0.5) || (normalizedRotationY >= 2.7 && normalizedRotationY <= 3.4)) && ((normalizedRotationX >= -0.5 && normalizedRotationX <= 0.3) || (normalizedRotationX >= 2.5 && normalizedRotationX <= 3.1)):
          setCurrentStage(1);
          break;
        case ((normalizedRotationY >= 2.9 && normalizedRotationY <= 3.5) || (normalizedRotationY >= -0.01 && normalizedRotationY <= 0.1)) && ((normalizedRotationX >= 5.6 && normalizedRotationX <= 6.2) || (normalizedRotationX >= 3 && normalizedRotationX <= 4)):
          setCurrentStage(2);
          break;
        case ((normalizedRotationY >= 4.6 && normalizedRotationY <= 5) || (normalizedRotationY >= 1.3 && normalizedRotationY <= 1.5)) && ((normalizedRotationX >= 0.5 && normalizedRotationX <= 1.1) || (normalizedRotationX >= 1.9 && normalizedRotationX <= 2.3)):
          setCurrentStage(3);
          break;
        case ((normalizedRotationY >= 3 && normalizedRotationY <= 4.3) || (normalizedRotationY >= 1.3 && normalizedRotationY <= 2.5) || (normalizedRotationY >= 5 && normalizedRotationY <= 6)) && ((normalizedRotationX >= 4.2 && normalizedRotationX <= 5.1)):
          setCurrentStage(4);
          break;
        case ((normalizedRotationY >= 1.8 && normalizedRotationY <= 2.4) || (normalizedRotationY >= 4.8 && normalizedRotationY <= 5.4)) && ((normalizedRotationX >= 0.4 && normalizedRotationX <= 1) || (normalizedRotationX >= 2 && normalizedRotationX <= 2.6)):
          setCurrentStage(6);
          break;
        default:
          setCurrentStage(0);
      }
      
    }

    // const zoomedInRotation = useRef({ x: 0.7, y: -0.4, z: 0 });
    
    if (window.innerWidth <= 375) {
      // Logic for smooth transition based on zoomedIn state
      if (zoomedIn && currentStage === 1) {
        gsap.to(camera.position, {
          duration: 0.4,
          y: -0.53,
          z: 2.5,
          ease: "sine.inOut"
        });

        gsap.to(camera.rotation, {
          duration: 0.4,
          x: 0.9,
          y: 0.04,
          z: zoomedInRotation.current.z,
          ease: "sine.inOut"
        });

        gsap.to(islandRef.current.rotation, {
          duration: 0.4,
          x: 0.28945500000000024,
          y: 0.14097199999999965,
          z: 0,
          ease: "sine.inOut"
        });
      } else if (zoomedIn && currentStage == 2) {
          gsap.to(camera.position, {
          duration: 0.4,
          y: -0.7,
          z: 3.2,
          ease: "sine.inOut"
        });

        gsap.to(camera.rotation, {
          duration: 0.4,
          x: 1,
          y: -0.1,
          z: 0,
          ease: "sine.inOut"
        });

        gsap.to(islandRef.current.rotation, {
          duration: 0.4,
          x: 5.845279087054325,
          y: 3.28971910781601,
          z: 0,
          ease: "sine.inOut"
        });
      } else if (zoomedIn && currentStage == 3) {
          gsap.to(camera.position, {
          duration: 0.4,
          x: -0.3,
          y: -0.2,
          z: 3.1,
          ease: "sine.inOut"
        });

        gsap.to(camera.rotation, {
          duration: 0.4,
          x: 0.8,
          y: -0.3,
          z: 0.3,
          ease: "sine.inOut"
        });

        gsap.to(islandRef.current.rotation, {
          duration: 0.4,
          x: 0.803457120310501,
          y: 4.820682131861398,
          z: 0,
          ease: "sine.inOut"
        });
      } else if (zoomedIn && currentStage == 4) {
          gsap.to(camera.position, {
          duration: 0.4,
          x: 0,
          y: -0.2,
          z: 3.4,
          ease: "sine.inOut"
        });

        gsap.to(camera.rotation, {
          duration: 0.4,
          x: 0.6,
          y: -0.1,
          z: 0.3,
          ease: "sine.inOut"
        });

        gsap.to(islandRef.current.rotation, {
          duration: 0.4,
          x: 4.592248398087243,
          y: 3.24412777983353,
          z: 0,
          ease: "sine.inOut"
        });
      } else if ((zoomedIn && currentStage == 5) && zoomedAstro) {
          gsap.to(camera.position, {
          duration: 0.4,
          x: -0.3,
          y: 1.2,
          z: 5.4,
          ease: "sine.inOut"
        });

        gsap.to(camera.rotation, {
          duration: 0.4,
          x: -0.2,
          y: 0,
          z: 0.2,
          ease: "sine.inOut"
        });
      } 
      else if (zoomedIn && currentStage == 6) {
        gsap.to(camera.position, {
        duration: 0.4,
        x: -0.2,
        y: -0.4,
        z: 3.2,
        ease: "sine.inOut"
      });

      gsap.to(camera.rotation, {
        duration: 0.5,
        x: 0.8,
        y: -0.3,
        z: -0.3,
        ease: "sine.inOutt"
      });

      gsap.to(islandRef.current.rotation, {
        duration: 0.5,
        x: 0.5741813677014385,
        y: 2.2690755674931644,
        z: 0,
        ease: "sine.inOut"
      });
    } else if (zoomedIn == false) {
        gsap.to(camera.position, {
          duration: 0.5,
          x: initialCameraPosition.current.x,
          y: initialCameraPosition.current.y,
          z: 5,
          ease: "sine.inOut"
        });

        gsap.to(camera.rotation, {
          duration: 0.5,
          x: 0,
          y: 0,
          z: 0,
          ease: "sine.inOut"
        });
        gsap.to(islandRef.current.rotation, {
          duration: 0.5,
          z: 0,
          ease: "sine.inOut"
        });

      }
    } else if (window.innerWidth <= 480) {
        // Logic for smooth transition based on zoomedIn state
        if (zoomedIn && currentStage === 1) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: 0.1,
            y: -0.1,
            z: 2.8,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: 0.9,
            y: -0.1,
            z: zoomedInRotation.current.z,
            ease: "sine.inOut"
          });
  
          gsap.to(islandRef.current.rotation, {
            duration: 0.4,
            x: 0.22113117022956086,
            y: 0.2435171431003651,
            z: 0,
            ease: "sine.inOut"
          });
        } else if (zoomedIn && currentStage == 2) {
          gsap.to(camera.position, {
            duration: 0.4,
            y: -0.7,
            z: 3.2,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: 1,
            y: -0.1,
            z: 0,
            ease: "sine.inOut"
          });
  
          gsap.to(islandRef.current.rotation, {
            duration: 0.4,
            x: 5.807378757129229,
            y: 3.3110093505098543,
            z: 0,
            ease: "sine.inOut"
          });
        } else if (zoomedIn && currentStage == 3) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: -0.3,
            y: -0.2,
            z: 3.1,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: 0.8,
            y: -0.3,
            z: 0.3,
            ease: "sine.inOut"
          });
  
          gsap.to(islandRef.current.rotation, {
            duration: 0.4,
            x: 0.7611075175943913,
            y: 4.837319520998387,
            z: 0,
            ease: "sine.inOut"
          });
        } else if (zoomedIn && currentStage == 4) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: 0,
            y: -0.2,
            z: 3.4,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: 0.6,
            y: -0.1,
            z: 0.3,
            ease: "sine.inOut"
          });
  
          gsap.to(islandRef.current.rotation, {
            duration: 0.4,
            x: 4.6119002663238895,
            y: 3.2923474388894114,
            z: 0,
            ease: "sine.inOut"
          });
        } else if ((zoomedIn && currentStage == 5) && zoomedAstro) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: -0.3,
            y: 1.2,
            z: 5.4,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: -0.2,
            y: 0,
            z: 0.2,
            ease: "sine.inOut"
          });
        } 
        else if (zoomedIn && currentStage == 6) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: -0.2,
            y: -0.4,
            z: 3.2,
            ease: "sine.inOut"
          });
    
          gsap.to(camera.rotation, {
            duration: 0.5,
            x: 0.8,
            y: -0.3,
            z: -0.3,
            ease: "sine.inOutt"
          });
  
        gsap.to(islandRef.current.rotation, {
          duration: 0.5,
          x: 0.6017890341576511,
          y: 2.2615578816278177,
          z: 0,
          ease: "sine.inOut"
        });
      } else if (zoomedIn == false) {
          gsap.to(camera.position, {
            duration: 0.5,
            x: initialCameraPosition.current.x,
            y: initialCameraPosition.current.y,
            z: 5,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.5,
            x: 0,
            y: 0,
            z: 0,
            ease: "sine.inOut"
          });
          gsap.to(islandRef.current.rotation, {
            duration: 0.5,
            z: 0,
            ease: "sine.inOut"
          });
  
        }
    } else if (window.innerWidth <= 768) {
        // Logic for smooth transition based on zoomedIn state
        if (zoomedIn && currentStage === 1) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: 0.1,
            y: -0.3,
            z: 3.5,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: 0.9,
            y: -0.1,
            z: zoomedInRotation.current.z,
            ease: "sine.inOut"
          });
  
          gsap.to(islandRef.current.rotation, {
            duration: 0.4,
            x: 0.2938155362663455,
            y: 0.21441280106886573,
            z: 0,
            ease: "sine.inOut"
          });
        } else if (zoomedIn && currentStage == 2) {
          gsap.to(camera.position, {
            duration: 0.4,
            y: -0.65,
            z: 3.8,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: 1,
            y: -0.1,
            z: 0,
            ease: "sine.inOut"
          });
  
          gsap.to(islandRef.current.rotation, {
            duration: 0.4,
            x: 3.344335584255292,
            y: 0.024614605802901757,
            z: 0,
            ease: "sine.inOut"
          });
        } else if (zoomedIn && currentStage == 3) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: -0.2,
            y: -0.1,
            z: 3.3,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: 0.8,
            y: -0.2,
            z: 0.3,
            ease: "sine.inOut"
          });
  
          gsap.to(islandRef.current.rotation, {
            duration: 0.4,
            x: 0.7918151697631224,
            y: 4.817677888193271,
            z: 0,
            ease: "sine.inOut"
          });
        } else if (zoomedIn && currentStage == 4) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: 0.3,
            y: -0.1,
            z: 4,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: 0.6,
            y: 0.1,
            z: 0.3,
            ease: "sine.inOut"
          });
  
          gsap.to(islandRef.current.rotation, {
            duration: 0.4,
            x: 4.615177480805791,
            y: 3.1478773995890243,
            z: 0,
            ease: "sine.inOut"
          });
        } else if ((zoomedIn && currentStage == 5) && zoomedAstro) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: -0.3,
            y: 1.2,
            z: 5.4,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: -0.2,
            y: 0,
            z: 0.2,
            ease: "sine.inOut"
          });
        } 
        else if (zoomedIn && currentStage == 6) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: -0.1,
            y: -0.2,
            z: 3.4,
            ease: "sine.inOut"
          });
    
          gsap.to(camera.rotation, {
            duration: 0.5,
            x: 0.8,
            y: -0.3,
            z: -0.3,
            ease: "sine.inOutt"
          });
  
        gsap.to(islandRef.current.rotation, {
          duration: 0.5,
          x: 0.6247231311573982,
          y: 2.2505957919892,
          z: 0,
          ease: "sine.inOut"
        });
      } else if (zoomedIn == false) {
          gsap.to(camera.position, {
            duration: 0.5,
            x: initialCameraPosition.current.x,
            y: initialCameraPosition.current.y,
            z: 5,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.5,
            x: 0,
            y: 0,
            z: 0,
            ease: "sine.inOut"
          });
          gsap.to(islandRef.current.rotation, {
            duration: 0.5,
            z: 0,
            ease: "sine.inOut"
          });
  
        }
    } else if (window.innerWidth <= 1024) {
        // Logic for smooth transition based on zoomedIn state
        if (zoomedIn && currentStage === 1) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: 0.1,
            y: -0.6,
            z: 3.5,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: 0.9,
            y: -0.5,
            z: zoomedInRotation.current.z,
            ease: "sine.inOut"
          });
  
          gsap.to(islandRef.current.rotation, {
            duration: 0.4,
            x: 0.28376543721009284,
            y: 0.2109134946465705,
            z: 0,
            ease: "sine.inOut"
          });
        } else if (zoomedIn && currentStage == 2) {
          gsap.to(camera.position, {
            duration: 0.4,
            y: -0.9,
            z: 3.8,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: 1,
            y: -0.6,
            z: 0,
            ease: "sine.inOut"
          });
  
          gsap.to(islandRef.current.rotation, {
            duration: 0.4,
            x: 3.330172085583424,
            y: 0.018875740299563404,
            z: 0,
            ease: "sine.inOut"
          });
        } else if (zoomedIn && currentStage == 3) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: 0.26,
            y: -0.4,
            z: 3.4,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: 0.9,
            y: -0.35,
            z: 0.3,
            ease: "sine.inOut"
          });
  
          gsap.to(islandRef.current.rotation, {
            duration: 0.4,
            x: 0.7987446056549006,
            y: 4.795094293769255,
            z: 0,
            ease: "sine.inOut"
          });
        } else if (zoomedIn && currentStage == 4) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: 0.4,
            y: -1,
            z: 3.6,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: 0.9,
            y: -0.35,
            z: 0.3,
            ease: "sine.inOut"
          });
  
          gsap.to(islandRef.current.rotation, {
            duration: 0.4,
            x: 4.563751658753307,
            y: 3.9516959375119423,
            z: 0,
            ease: "sine.inOut"
          });
        } else if ((zoomedIn && currentStage == 5) && zoomedAstro) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: 0.5,
            y: 1,
            z: 5.7,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.4,
            x: -0.2,
            y: 0,
            z: 0.2,
            ease: "sine.inOut"
          });
        } 
        else if (zoomedIn && currentStage == 6) {
          gsap.to(camera.position, {
            duration: 0.4,
            x: 0.2,
            y: -0.6,
            z: 3.4,
            ease: "sine.inOut"
          });
    
          gsap.to(camera.rotation, {
            duration: 0.5,
            x: 0.8,
            y: -0.465,
            z: -0.3,
            ease: "sine.inOutt"
          });
  
        gsap.to(islandRef.current.rotation, {
          duration: 0.5,
          x: 0.6519291780643481,
          y: 2.2293977155843088,
          z: 0,
          ease: "sine.inOut"
        });
      } else if (zoomedIn == false) {
          gsap.to(camera.position, {
            duration: 0.5,
            x: initialCameraPosition.current.x,
            y: initialCameraPosition.current.y,
            z: 5,
            ease: "sine.inOut"
          });
  
          gsap.to(camera.rotation, {
            duration: 0.5,
            x: 0,
            y: 0,
            z: 0,
            ease: "sine.inOut"
          });
          gsap.to(islandRef.current.rotation, {
            duration: 0.5,
            z: 0,
            ease: "sine.inOut"
          });
  
        }
    } else {
      // Logic for smooth transition based on zoomedIn state
      if (zoomedIn && currentStage === 1) {
        gsap.to(camera.position, {
          duration: 0.4,
          z: 3,
          ease: "sine.inOut"
        });

        gsap.to(camera.rotation, {
          duration: 0.4,
          x: zoomedInRotation.current.x,
          y: zoomedInRotation.current.y,
          z: zoomedInRotation.current.z,
          ease: "sine.inOut"
        });

        gsap.to(islandRef.current.rotation, {
          duration: 0.4,
          x: 0.28945477836248745,
          y: 0.14097192528553837,
          z: 0,
          ease: "sine.inOut"
        });
      } else if (zoomedIn && currentStage == 2) {
          gsap.to(camera.position, {
          duration: 0.4,
          z: 3,
          ease: "sine.inOut"
        });

        gsap.to(camera.rotation, {
          duration: 0.4,
          x: 0.7,
          y: -1.4,
          z: 0,
          ease: "sine.inOut"
        });

        gsap.to(islandRef.current.rotation, {
          duration: 0.4,
          x: 3.21929606082905,
          y: 5.985088333233211,
          z: 0,
          ease: "sine.inOut"
        });
      } else if (zoomedIn && currentStage == 3) {
          gsap.to(camera.position, {
          duration: 0.4,
          x: 0.1,
          y: -0.5,
          z: 3.3,
          ease: "sine.inOut"
        });

        gsap.to(camera.rotation, {
          duration: 0.4,
          x: 0.8,
          y: -0.9,
          z: 0.3,
          ease: "sine.inOut"
        });

        gsap.to(islandRef.current.rotation, {
          duration: 0.4,
          x: 0.9475730024136642,
          y: 4.994527769315647,
          z: 0,
          ease: "sine.inOut"
        });
      } else if (zoomedIn && currentStage == 4) {
          gsap.to(camera.position, {
          duration: 0.4,
          x: 0.2,
          y: -0.4,
          z: 4,
          ease: "sine.inOut"
        });

        gsap.to(camera.rotation, {
          duration: 0.4,
          x: 0.6,
          y: -0.6,
          z: 0.3,
          ease: "sine.inOut"
        });

        gsap.to(islandRef.current.rotation, {
          duration: 0.4,
          x: 4.657755613882919,
          y: 2.2562522450286977,
          z: 0,
          ease: "sine.inOut"
        });
      } else if ((zoomedIn && currentStage == 5) && zoomedAstro) {
          gsap.to(camera.position, {
          duration: 0.4,
          z: 5.4,
          ease: "sine.inOut"
        });

        gsap.to(camera.rotation, {
          duration: 0.4,
          x: 0.5,
          y: -0.3,
          z: 0.2,
          ease: "sine.inOut"
        });
      } 
      else if (zoomedIn && currentStage == 6) {
        gsap.to(camera.position, {
        duration: 0.4,
        x: 0.2,
        y: -0.9,
        z: 3.6,
        ease: "sine.inOut"
      });

      gsap.to(camera.rotation, {
        duration: 0.5,
        x: 0.7,
        y: -0.6,
        z: -0.3,
        ease: "sine.inOutt"
      });

      gsap.to(islandRef.current.rotation, {
        duration: 0.5,
        x: 0.7175668892322182,
        y: 2.2841860793091673,
        z: 0,
        ease: "sine.inOut"
      });
    } else if (zoomedIn == false) {
        gsap.to(camera.position, {
          duration: 0.5,
          x: initialCameraPosition.current.x,
          y: initialCameraPosition.current.y,
          z: 5,
          ease: "sine.inOut"
        });

        gsap.to(camera.rotation, {
          duration: 0.5,
          x: 0,
          y: 0,
          z: 0,
          ease: "sine.inOut"
        });
        gsap.to(islandRef.current.rotation, {
          duration: 0.5,
          z: 0,
          ease: "sine.inOut"
        });

      }
    }

  });

  return (
      <a.group ref={islandRef} {...props} scale={[1, 1, 1]} position={[0, 0, -20]}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="Sphere001_0" scale={2.473}>
                <mesh
                  name="Object_4"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_4.geometry}
                  material={materials.material}
                />
                <Ship isRotating={isRotating}/>
              </group>
              <group name="Sphere002_1" scale={2.444}>
                <mesh
                  name="Object_6"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_6.geometry}
                  material={materials.material}
                />
                <Book isRotating={isRotating}/>
              </group>
              <group name="Sphere003_2" scale={2.423}>
                <mesh
                  name="Object_8"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_8.geometry}
                  material={materials.material}
                />
                <SatelliteDish isRotating={isRotating}/>
              </group>
              <group name="Sphere004_3" scale={2.395}>
                <mesh
                  name="Object_10"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_10.geometry}
                  material={materials.material}
                />
                <Torii isRotating={isRotating}/>
              </group>
              <group name="Sphere005_4" scale={2.367}>
                <mesh
                  name="Object_12"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_12.geometry}
                  material={materials.material}
                />
              </group>
              <group name="Sphere006_5" scale={2.344}>
                <mesh
                  name="Object_14"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_14.geometry}
                  material={materials.material}
                />
              </group>
              <group name="Sphere007_6" scale={2.316}>
                <mesh
                  name="Object_16"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_16.geometry}
                  material={materials.material}
                />
              </group>
              <group name="Sphere008_7" scale={2.289}>
                <mesh
                  name="Object_18"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_18.geometry}
                  material={materials.material}
                />
              </group>
              <group name="Sphere009_8" scale={2.269}>
                <mesh
                  name="Object_20"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_20.geometry}
                  material={materials.material}
                />
              </group>
              <group name="Sphere0010_9" scale={2.243}>
                <mesh
                  name="Object_22"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_22.geometry}
                  material={materials.material}
                />
              </group>
              <group name="Sphere011_10" scale={2.217}>
                <mesh
                  name="Object_24"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_24.geometry}
                  material={materials.material}
                />
              </group>
              <group name="Sphere012_11" scale={22.532}>
                <mesh
                  name="Object_26"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_26.geometry}
                  material={materials.material_1}
                />
              </group>
              <group name="Circle_15" scale={3.736}>
                <group name="Sphere_12" scale={0.67}>
                  <mesh
                    name="Object_29"
                    castShadow
                    receiveShadow
                    geometry={nodes.Object_29.geometry}
                    material={materials.material}
                  />
                  <Pacman isRotating={isRotating} />
                </group>
                <group name="x_13" scale={0.663}>
                  <mesh
                    name="Object_31"
                    castShadow
                    receiveShadow
                    geometry={nodes.Object_31.geometry}
                    material={materials.lights}
                  />
                </group>
                <group name="xxxx_14" scale={0.673}>
                  <mesh
                    name="Object_33"
                    castShadow
                    receiveShadow
                    geometry={nodes.Object_33.geometry}
                    material={materials.material_3}
                  />
                </group>
              </group>
              <group
                name="Sphere013_16"
                rotation={[Math.PI / 2, 0, 0]}
                scale={[0.019, 0.03, 0.019]}
              >
                <mesh
                  name="Object_35"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_35.geometry}
                  material={materials.material_4}
                />
              </group>
              <group
                name="Sphere014_18"
                rotation={[Math.PI / 2, 0, 0]}
                scale={[0.017, 0.028, 0.017]}
              >
                <mesh
                  name="Object_37"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_37.geometry}
                  material={materials.material_5}
                />
              </group>
              <group
                name="Sphere015_20"
                rotation={[Math.PI / 2, 0, 0]}
                scale={[0.019, 0.03, 0.019]}
              >
                <mesh
                  name="Object_39"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_39.geometry}
                  material={materials.material_5}
                />
              </group>
              <group
                name="Sphere016_22"
                rotation={[Math.PI / 2, 0, 0]}
                scale={[0.016, 0.026, 0.016]}
              >
                <mesh
                  name="Object_41"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_41.geometry}
                  material={materials.material_4}
                />
              </group>
              <group name="Circle005_24" scale={3.736} />
              <group
                name="Sphere017_25"
                rotation={[Math.PI / 2, 0, 0]}
                scale={[0.017, 0.028, 0.017]}
              >
                <mesh
                  name="Object_44"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_44.geometry}
                  material={materials.material_5}
                />
              </group>
              <group
                name="Sphere018_27"
                rotation={[Math.PI / 2, 0, 0]}
                scale={[0.017, 0.028, 0.017]}
              >
                <mesh
                  name="Object_46"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_46.geometry}
                  material={materials.material_4}
                />
              </group>
              <group
                name="Sphere019_29"
                rotation={[Math.PI / 2, 0, 0]}
                scale={[0.019, 0.03, 0.019]}
              >
                <mesh
                  name="Object_48"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_48.geometry}
                  material={materials.material_4}
                />
              </group>
              <group
                name="Sphere020_31"
                rotation={[Math.PI / 2, 0, 0]}
                scale={[0.016, 0.026, 0.016]}
              >
                <mesh
                  name="Object_50"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_50.geometry}
                  material={materials.material_5}
                />
              </group>
              <group name="Sphere021_33" scale={0}>
                <mesh
                  name="Object_52"
                  castShadow
                  receiveShadow
                  geometry={nodes.Object_52.geometry}
                  material={materials.CORE}
                />
              </group>
            </group>
          </group>
        </group>
      </group>
    </a.group>
  );
};

export default Planet;